{
	"root": true,
	////////////////////////////////////////////////////////////////////////////:
	// On se base sur le parser de TypeScript, avec le plugin React
	"parser": "@typescript-eslint/parser",
	////////////////////////////////////////////////////////////////////:
	// Les diff√©rentes options du parser
	"parserOptions": {
		// Only ESLint 6.2.0 and later support ES2020.
		"ecmaVersion": 2020,
		"ecmaFeatures": {
			"jsx": true
		},
		"sourceType": "module"
	},
	"env": {
		"commonjs": true,
		"es6": true,
		"browser": true
	},
	////////////////////////////////////////////////////////////////////////////////
	// Param√®tres
	"settings": {
		"react": {
			"createClass": "createReactClass", // Regex for Component Factory to use, default to "createReactClass"
			"pragma": "React",  // Pragma to use, default to "React"
			"fragment": "Fragment",  // Fragment to use (may be a property of <pragma>), default to "Fragment"
			"version": "detect", // React version. "detect" automatically picks the version you have installed. You can also use `16.0`, `16.3`, etc, if you want to override the detected value. Default to latest and warns if missing. It will default to "detect" in the future.
			"flowVersion": "0.53" // Flow version
		},
		"linkComponents": [
			// Components used as alternatives to <a> for linking, eg. <Link to={ url } />
			"Hyperlink",
			{"name": "Link", "linkAttribute": "to"}
		],
		"import/extensions": [
			".js",
			".jsx",
			".ts",
			".tsx"
		]
	},
	/////////////////////////////////////////////////////////////////////////////////:
	// Tous les plugins ajout√©s √† ESLint pour fonctioner avec React, TypeScript et Prettier
	"plugins": [
		"@typescript-eslint", // Monorepo for all the tooling which enables ESLint to support TypeScript
		"react", // React specific linting rules for ESLint
		"react-hooks", // This ESLint plugin enforces the Rules of Hooks. It is a part of the Hooks API for React.
		"node", // Additional ESLint's rules for Node.js
		"import", // This plugin intends to support linting of ES2015+ (ES6+) import/export syntax, and prevent issues with misspelling of file paths and import names.
		"prettier" // Turns off all rules that are unnecessary or might conflict with
	],
	//////////////////////////////////////////////////////////////////////:
	// Extends RIEN parce que je pr√©f√®re avoir acc√®s √† toutes les r√®gles depuis ce fichier.
	"extends": [
		"eslint:recommended", // JS
		"plugin:node/recommanded", // NodeJS
		"plugin:import/errors", // Imports
		"plugin:import/warnings", // Imports
		"plugin:@typescript-eslint:recommendedd", // TS
		"plugin:react/recommended", // React
		"plugin:react-hooks/recommended", // React hooks
		"prettier", // Le mettre en dernier pour correctement d√©sactiver les r√®gles qui entrent en conflit avec Prettier
		"prettier/react",
		"prettier/babel"
	],
	////////////////////////////////////////////////////////////////////////
	// Toutes les r√®gles
	// ‚≠êÔ∏è recommanded by author
	// üîß fixable
	"rules": {
		"prettier/prettier": [
			"error",
			{
				"trailingComma": "all",
				"tabWidth": 2,
				"semi": false,
				"singleQuote": true,
				"bracketSpacing": true,
				"eslintIntegration": true,
				"printWidth": 120
			}
		],
		// Les r√®gles ESLint √† d√©sactiver pour laisser la place aux r√®gles TypeScript qui font le m√™me travail, plus efficacement.
		"constructor-super": "off", // ts(2335) & ts(2377)
        "getter-return": "off", // ts(2378)
        "no-const-assign": "off", // ts(2588)
        "no-dupe-args": "off", // ts(2300)
        "no-dupe-class-members": "off", // ts(2393) & ts(2300)
        "no-dupe-keys": "off", // ts(1117)
        "no-func-assign": "off", // ts(2539)
        "no-import-assign": "off", // ts(2539) & ts(2540)
        "no-new-symbol": "off", // ts(2588)
        "no-obj-calls": "off", // ts(2349)
        "no-redeclare": "off", // ts(2451)
        "no-setter-return": "off", // ts(2408)
        "no-this-before-super": "off", // ts(2376)
        "no-undef": "off", // ts(2304)
        "no-unreachable": "off", // ts(7027)
        "no-unsafe-negation": "off", // ts(2365) & ts(2360) & ts(2358)
		"no-var": "error", // ts transpiles let/const to var, so no need for vars any more
        "prefer-const": "error", // ts provides better types with const
        "prefer-rest-params": "error", // ts provides better types with rest args over arguments
        "prefer-spread": "error", // ts transpiles spread to apply, so no need for manual apply
		"valid-typeof": "off", // ts(2367)
		"ban-types": "off",
		/////////////////////////////////////////////////////////////////////////////
		// TYPESCRIPT ///////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////
		"no-unused-vars": "off",
		"@typescript-eslint/no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }],
		/////////////////////////////////////////////////////////////////////////////
		// NODE /////////////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////
		//Possible Errors
		"node/no-callback-literal": "off", // ensure Node.js-style error-first callback pattern is followed
		"node/no-exports-assign": "off", // ‚≠êÔ∏è disallow the assignment to exports
		"node/no-extraneous-import": "off", // ‚≠êÔ∏è disallow import declarations which import extraneous modules
		"node/no-extraneous-require": "off", // ‚≠êÔ∏è disallow require() expressions which import extraneous modules 	‚≠êÔ∏è
		"node/no-missing-import": "off", // ‚≠êÔ∏è disallow import declarations which import non-existence modules 	‚≠êÔ∏è
		"node/no-missing-require": "off", // ‚≠êÔ∏è disallow require() expressions which import non-existence modules 	‚≠êÔ∏è
		"node/no-unpublished-bin": "off", // ‚≠êÔ∏è disallow bin files that npm ignores
		"node/no-unpublished-import": "off", // ‚≠êÔ∏è disallow import declarations which import private modules 	‚≠êÔ∏è
		"node/no-unpublished-require": "off", // ‚≠êÔ∏è disallow require() expressions which import private modules 	‚≠êÔ∏è
		"node/no-unsupported-features/es-builtins": "off", // ‚≠êÔ∏è disallow unsupported ECMAScript built-ins on the specified version 	‚≠êÔ∏è
		"node/no-unsupported-features/es-syntax": "off", // ‚≠êÔ∏è disallow unsupported ECMAScript syntax on the specified version 	‚≠êÔ∏è
		"node/no-unsupported-features/node-builtins": "off", // ‚≠êÔ∏è disallow unsupported Node.js built-in APIs on the specified version 	‚≠êÔ∏è
		"node/process-exit-as-throw": "off", // ‚≠êÔ∏è make process.exit() expressions the same code path as throw 	‚≠êÔ∏è
		"node/shebang": "warn", // üîß ‚≠êÔ∏è suggest correct usage of shebang
		//Best Practices
		"node/no-deprecated-api": "off", // ‚≠êÔ∏è disallow deprecated APIs
		//Stylistic Issues
		"node/exports-style": "off", // enforce either module.exports or exports
		"node/file-extension-in-import": "off", // üîß enforce the style of file extensions in import declarations
		"node/prefer-global/buffer": "off", // enforce either Buffer or require("buffer").Buffer
		"node/prefer-global/console": "off", // enforce either console or require("console")
		"node/prefer-global/process": "off", // enforce either process or require("process")
		"node/prefer-global/text-decoder": "off", // enforce either TextDecoder or require("util").TextDecoder
		"node/prefer-global/text-encoder": "off", // enforce either TextEncoder or require("util").TextEncoder
		"node/prefer-global/url-search-params": "off", // enforce either URLSearchParams or require("url").URLSearchParams
		"node/prefer-global/url": "off", // enforce either URL or require("url").URL
		"node/prefer-promises/dns": "off", // enforce require("dns").promises
		"node/prefer-promises/fs": "off", // enforce require("fs").promises
		/////////////////////////////////////////////////////////////////////////////
		// REACT ////////////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////
		//List of supported rules
		"react/boolean-prop-naming": "off", // Enforces consistent naming for boolean props
		"react/button-has-type": "off", // Forbid "button" element without an explicit "type" attribute
		"react/default-props-match-prop-types": "off", // Enforce all defaultProps are defined and not "required" in propTypes.
		"react/destructuring-assignment": "off", // Enforce consistent usage of destructuring assignment of props, state, and context
		"react/display-name": "off", // Prevent missing displayName in a React component definition
		"react/forbid-component-props": "off", // Forbid certain props on components
		"react/forbid-dom-props": "off", // Forbid certain props on DOM Nodes
		"react/forbid-elements": "off", // Forbid certain elements
		"react/forbid-foreign-prop-types": "off", // Forbid using another component's propTypes
		"react/forbid-prop-types": "off", // Forbid certain propTypes
		"react/function-component-definition": "off", // üîß - Standardize the way function component get defined
		"react/no-access-state-in-setstate": "off", // Reports when this.state is accessed within setState
		"react/no-adjacent-inline-elements": "off", // Prevent adjacent inline elements not separated by whitespace.
		"react/no-array-index-key": "off", // Prevent usage of Array index in keys
		"react/no-children-prop": "off", // Prevent passing of children as props.
		"react/no-danger": "warning", // Prevent usage of dangerous JSX props
		"react/no-danger-with-children": "off", // Report when a DOM element is using both children and dangerouslySetInnerHTML
		"react/no-deprecated": "off", // Prevent usage of deprecated methods
		"react/no-did-mount-set-state": "off", // Prevent usage of setState in componentDidMount
		"react/no-did-update-set-state": "off", // Prevent usage of setState in componentDidUpdate
		"react/no-direct-mutation-state": "off", // Prevent direct mutation of this.state
		"react/no-find-dom-node": "off", // Prevent usage of findDOMNode
		"react/no-is-mounted": "off", // Prevent usage of isMounted
		"react/no-multi-comp": "off", // Prevent multiple component definition per file
		"react/no-redundant-should-component-update": "off", // Flag shouldComponentUpdate when extending PureComponent
		"react/no-render-return-value": "off", // Prevent usage of the return value of React.render
		"react/no-set-state": "off", // Prevent usage of setState
		"react/no-string-refs": "off", // Prevent string definitions for references and prevent referencing this.refs
		"react/no-this-in-sfc": "off", // Report "this" being used in stateless components
		"react/no-typos": "off", // Prevent common typos
		"react/no-unescaped-entities": "off", // Detect unescaped HTML entities, which might represent malformed tags
		"react/no-unknown-property": "off", // üîß - Prevent usage of unknown DOM property
		"react/no-unsafe": "off", // Prevent usage of unsafe lifecycle methods
		"react/no-unused-prop-types": "off", // Prevent definitions of unused prop types
		"react/no-unused-state": "off", // Prevent definition of unused state fields
		"react/no-will-update-set-state": "off", // Prevent usage of setState in componentWillUpdate
		"react/prefer-es6-class": "off", // Enforce ES5 or ES6 class for React Components
		"react/prefer-read-only-props": "off", // üîß Require read-only props.
		"react/prefer-stateless-function": "off", // Enforce stateless components to be written as a pure function
		"react/prop-types": "off", // Prevent missing props validation in a React component definition
		"react/react-in-jsx-scope": "off", // Prevent missing React when using JSX
		"react/require-default-props": "off", // Enforce a defaultProps definition for every prop that is not a required prop.
		"react/require-optimization": "off", // Enforce React components to have a shouldComponentUpdate method
		"react/require-render-return": "off", // Enforce ES5 or ES6 class for returning value in render function
		"react/self-closing-comp": "off", // üîß - Prevent extra closing tags for components without children
		"react/sort-comp": "off", // Enforce component methods order
		"react/sort-prop-types": "off", // Enforce propTypes declarations alphabetical sorting
		"react/state-in-constructor": "off", // State initialization in an ES6 class component should be in a constructor
		"react/static-property-placement": "off", // Defines where React component static properties should be positioned.
		"react/style-prop-object": "off", // Enforce style prop value is an object
		"react/void-dom-elements-no-children": "off", // Prevent passing of children to void DOM elements (e.g. <br />).

		/////////////////////////////////////////////////////////////////////////////////////////
		//JSX-specific rules
		"react/jsx-boolean-value": "off", // üîß - Enforce boolean attributes notation in JSX
		"react/jsx-child-element-spacing": "off", // Ensures inline tags are not rendered without spaces between them
		"react/jsx-closing-bracket-location": "off", // üîß - Validate closing bracket location in JSX
		"react/jsx-closing-tag-location": "off", // üîß - Validate closing tag location for multiline JSX
		"react/jsx-curly-brace-presence": "off", // üîß - Disallow unnecessary JSX expressions when literals alone are sufficient or enfore JSX expressions on literals in JSX children or attributes
		"react/jsx-curly-newline": "off", // üîß - Enforce consistent line breaks inside jsx curly
		"react/jsx-curly-spacing": "off", // üîß - Enforce or disallow spaces inside of curly braces in JSX attributes
		"react/jsx-equals-spacing": "off", // üîß - Disallow or enforce spaces around equal signs in JSX attributes
		"react/jsx-filename-extension": "off", // Restrict file extensions that may contain JSX
		"react/jsx-first-prop-new-line": "off", // üîß - Ensure proper position of the first property in JSX
		"react/jsx-fragments": "off", // üîß - Enforce shorthand or standard form for React fragments
		"react/jsx-handler-names": "off", // Enforce event handler naming conventions in JSX
		"react/jsx-indent": "off", // üîß - Validate JSX indentation
		"react/jsx-indent-props": "off", // üîß - Validate props indentation in JSX
		"react/jsx-key": "off", // Report missing key props in iterators/collection literals
		"react/jsx-max-depth": "off", // Validate JSX maximum depth
		"react/jsx-max-props-per-line": "off", // üîß - Limit maximum of props on a single line in JSX
		"react/jsx-newline": "off", // üîß - Enforce a new line after jsx elements and expressions
		"react/jsx-no-bind": "off", // Prevents usage of Function.prototype.bind and arrow functions in React component props
		"react/jsx-no-comment-textnodes": "off", // Comments inside children section of tag should be placed inside braces
		"react/jsx-no-constructed-context-values": "off", // Prevents JSX context provider values from taking values that will cause needless rerenders.
		"react/jsx-no-duplicate-props": "off", // Enforce no duplicate props
		"react/jsx-no-literals": "off", // Prevent using string literals in React component definition
		"react/jsx-no-script-url": "off", // Forbid javascript: URLs
		"react/jsx-no-target-blank": "off", // Forbid target="_blank" attribute without rel="noreferrer"
		"react/jsx-no-undef": "off", // Disallow undeclared variables in JSX
		"react/jsx-no-useless-fragment": "off", // üîß - Disallow unnecessary fragments
		"react/jsx-one-expression-per-line": "off", // üîß - Limit to one expression per line in JSX
		"react/jsx-pascal-case": "off", // Enforce PascalCase for user-defined JSX components
		"react/jsx-props-no-multi-spaces": "off", // üîß - Disallow multiple spaces between inline JSX props
		"react/jsx-props-no-spreading": "off", // Prevent JSX prop spreading
		"react/jsx-sort-default-props": "off", // Enforce default props alphabetical sorting
		"react/jsx-sort-props": "off", // üîß - Enforce props alphabetical sorting
		"react/jsx-space-before-closing": "off", // üîß - Validate spacing before closing bracket in JSX
		"react/jsx-tag-spacing": "off", // üîß - Validate whitespace in and around the JSX opening and closing brackets
		"react/jsx-uses-react": "off", // Prevent React to be marked as unused
		"react/jsx-uses-vars": "off", // Prevent variables used in JSX to be marked as unused
		"react/jsx-wrap-multilines": "off" // üîß - Prevent missing parentheses around multilines JSX
	}
}