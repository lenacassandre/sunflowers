import React, { useContext, useEffect, useRef, useState } from "react";

import { Button } from "../Button/Button";
import { RequiredSymbol } from "../RequiredSymbol/RequiredSymbol";

import './Select.scss'

import { Context } from "../ViewComposer/ViewComposer";

/////////////////////////////////////////////////////////////////////////////////////////////////:
// PROPS
type SelectProps = {
	name: string;
	values: Array<any>;
	labels: Array<string>;
	value?: any | Array<any>;

	style?: any;
	className?: string;
	label?: string;

	multiple?: boolean;
	required?: boolean;

	all?: string;
	none?: string;
	text?: string;

	onChange?: (v: any) => void;
	displayFilter?: (value: any) => string;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// MAIN COMPONENT
export const Select: React.FC<SelectProps> = (props): JSX.Element => {
	const CobblestoneContext = useContext(Context);

	const buttonRef = useRef<HTMLButtonElement>()

	const [selection, setSelection] = useState<any[]>(selectionState(props.value))

	function handleChange(newSelection: any[]) {

		setSelection(newSelection);

		console.log("handleChange", newSelection)

		props.onChange && props.onChange(props.multiple ? newSelection : newSelection[0])
	}

	useEffect(() => {
		setSelection(selectionState(props.value))
	}, [props.value])

	// OPEN THE LIST ////////////////////////////////////////////////////////
	function open() {
		const rect = buttonRef.current?.getBoundingClientRect()

		if(rect) {
			CobblestoneContext.modal && CobblestoneContext.modal({
				className: `SelectModal ${props.className || ""}`,
				raw: true,
				delay: 0,
				form: (resolve, reject) =>
					<SelectListModal
						{...props}

						resolve={resolve}
						reject={reject}

						value={selection}

						buttonRect={rect}
						buttonRef={buttonRef}

						onChange={handleChange}
					/>
			})
				.then(() => {})
				.catch(() => {})
		}
	}

	const text = props.text || props.values.reduce((string, value, i) => {
		if(selection.includes(value)) {
			const valueIndex = props.values.findIndex(v => v === value);
			let label =	props.labels[valueIndex];
			label = props.displayFilter ? props.displayFilter(label) : label;
			return `${string}${label}${i < selection.length - 1 ? ", " : ""}`;
		}
		else return string
	}, "")

	// RENDER /////////////////////////////////////////////////////////////////
	return (
		<div className={`Select ${props.className || ""}`}>
			{
				props.label && (
					<label htmlFor={text}>
						{props.label}
					</label>
				)
			}
			<Button
				name={text}
				onClick={open}
				reference={buttonRef}
			/>
			<input
				type="hidden"
				value={selection ? (props.multiple ? JSON.stringify(selection) : selection[0]) : ""}
				name={props.name}
				required={props.required}
			/>
		</div>
	);
};


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// TODO : repositionner la liste on window.resize. Ca ne marche pas Ã  tous les coups pour l'instant.

function SelectListModal(props: {
	resolve: (data?: any) => void,
	reject: () => void,

	buttonRef: React.MutableRefObject<HTMLButtonElement | undefined>,
	buttonRect: DOMRect,
} & SelectProps) {
	const [state, setState] = useState<{selection: any[], rect: DOMRect}>({
		rect:props.buttonRect,
		selection : selectionState(props.value)
	})

	///////////////////////////////////////////////////////////////////////////////////////////
	// bind state.selection to props.value
	useEffect(() => {
		setState({
			...state,
			selection : selectionState(props.value)
		})
	}, [props.value])

	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// RESIZE
	// force render
	const resize = () => {
		const newRect = props.buttonRef.current?.getBoundingClientRect();
		if(newRect) setState({...state, rect: newRect})
	}

	useEffect(() => {
		window.addEventListener("resize", resize);

		return () => {
			window.removeEventListener("resize", resize);
		}
	}, [])

	/////////////////////////////////////////////////////////////////////////////////////////////////
	// ON CHANGE

	function handleClick(index: number) {
		let newSelection: any[] = []

		// Multiple selection
		if(props.multiple) {
			const alreadySelected = state.selection.includes(props.values[index]);

			// was already selected
			if(alreadySelected) {
				newSelection = props.values.filter((v, i) =>
					i !== index &&
					state.selection.includes(v)
				)
			}
			// wasn't already selected
			else {
				newSelection = props.values.filter((v, i) =>
					i === index ||
					state.selection.includes(v)
				)
			}
		}
		// no multiple selection
		else {
			newSelection = [props.values[index]]
			props.resolve()
		}

		setState({...state, selection: newSelection});
		props.onChange && props.onChange(newSelection)
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// RETURN
	const rect = props.buttonRef.current?.getBoundingClientRect() ? state.rect : props.buttonRect;

	const style: any = {
		left: `${rect.left}px`,
		minWidth: `${rect.width}px`,
	}

	if(rect.top < window.innerHeight / 2) {
		style.top = `${rect.top + rect.height}px`;
	}
	else {
		style.bottom = `${window.innerHeight - rect.bottom + rect.height}px`;
	}

	return (
		<ul
			className="SelectList"
			style={style}
		>
			{props.labels.map((label, i) => (
				<li
					key={i}
					onClick={() => handleClick(i)}
					className={state.selection.includes(props.values[i]) ? "active" : ""}
				>
					{label}
				</li>
			))}
		</ul>
	)
}

/////////////////////////////////////////////////////////////////////////////////////////////////////::
/////////////////////////////////////////////////////////////////////////////////////////////////////::
/////////////////////////////////////////////////////////////////////////////////////////////////////::
/////////////////////////////////////////////////////////////////////////////////////////////////////::
/////////////////////////////////////////////////////////////////////////////////////////////////////::
/////////////////////////////////////////////////////////////////////////////////////////////////////::
/////////////////////////////////////////////////////////////////////////////////////////////////////::
/////////////////////////////////////////////////////////////////////////////////////////////////////::
/////////////////////////////////////////////////////////////////////////////////////////////////////::
/////////////////////////////////////////////////////////////////////////////////////////////////////::
/////////////////////////////////////////////////////////////////////////////////////////////////////::
/////////////////////////////////////////////////////////////////////////////////////////////////////::
/////////////////////////////////////////////////////////////////////////////////////////////////////::
/////////////////////////////////////////////////////////////////////////////////////////////////////::
/////////////////////////////////////////////////////////////////////////////////////////////////////::
/////////////////////////////////////////////////////////////////////////////////////////////////////::
/////////////////////////////////////////////////////////////////////////////////////////////////////::
/////////////////////////////////////////////////////////////////////////////////////////////////////::
/////////////////////////////////////////////////////////////////////////////////////////////////////::
/////////////////////////////////////////////////////////////////////////////////////////////////////::

function selectionState(value: any[]) {
	return Array.isArray(value)
	? value
	: value
	? [value]
	: []
}